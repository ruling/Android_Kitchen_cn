############################################################################
#
# Copyright (c) 2013 - dsixda (dislam@rocketmail.com)
#
# Android 厨房是100%免费。此脚本文件仅供个人或学习使用
#
############################################################################

#
# 此脚本拥有两个可选参数:
#
# $1 = "for_zip" - 使用此选项在 update.zip 建立后
# $2 = yes/no (快速创建模式) - 当前依赖 $1
#


if [ "$1" == "" ]
then
  clear
fi


echo

if [ -d WORKING_* ]
then

  cd WORKING_*
  cd META-INF/com/google/android

else
  echo
  echo "未发现工作文件夹，你需要创建一个！"
  exit 0
fi



if [ "$1" == "" ]
then

  echo "转换工具: update-script (Amend) 转换为 updater-script (Edify)"
  echo "--------------------------------------------------------------------------"
  echo
  echo "此脚本将会转换 update-script 为 updater-script 并且添加 update-binary 文件。"
  echo 
  echo "此操作项在创建 ROM 时同样会出现, 所以现在并不是必须转换 update-script 脚本。"
  echo "本定制工具不能编译 updater-scripts 脚本，所以只有在进行创建 ROM 刷机包文件"
  echo "操作时，才可以使用 updater-script 刷机脚本。"
  echo
  echo "请确认工作文件夹中 META-INF/com/google/android 下存在update-script 刷机脚本。"
  echo
  echo -n "继续并进行转换(y/n)? (默认为: y): "

  read proceed_now
  echo

  if [ "$proceed_now" == "n" ] 
  then
    cd ../../../../..
    exit 0
  fi

  echo "--------------------------------------------------------------------------"
  echo

fi

if [ -e update-script ]
then
  
  if [ -e updater-script ]
  then

    if [ "$2" == "yes" ]
    then
      remove_it=y
    else
      echo "错误: 同时存在 update-script 和 updater-script 两种脚本在同一个文件夹，"
      echo "      请删除其中一个。"
      echo

      echo -n "删除 updater-script 脚本并继续转换(y/n)? (默认为: y): "
      read remove_it
      echo
    fi

    if [ "$remove_it" != "n" ]
    then
      rm -vf updater-script
      echo
    else
      cd ../../../../..
      exit 0
    fi
  fi

else
  echo "错误: 未发现 update-script 刷机脚本！"
  cd ../../../../..
  exit 0
fi


cd ../../../../..


if [ "$1" != "for_zip" ]
then
  echo "转换前正在检查 update-script 脚本最终修改 ..."
  scripts/fix_pre_build 
fi



cd WORKING_*
cd META-INF/com/google/android


echo
echo "--------------------------------------------------------------------------"
echo

echo "正在转换为 updater-script 刷机脚本，请稍候 ..."
echo

cp update-script updater-script

orig_list=( DATA SYSTEM PRELOAD CACHE SDEXT BOOT SDCARD )
new_list=( userdata system preload cache sdext boot sdcard )
new_list_str="0 1 2 3 4 5 6"


echo "- 初始格式设置 ..."

#
# In Samsung Galaxy S2 and equivalent, convert 'format' back to delete_recursive, 
# which was changed earlier
#
cd ../../../../..
scripts/check_galaxy_s_and_s2
ss2=$?
scripts/check_galaxy_s2x
s2x=$?
scripts/check_galaxy_s3_common
s3_common=$?
scripts/check_galaxy_s4_common
s4_common=$?

cd WORKING_*
cd META-INF/com/google/android

if [ "$ss2" == "1" ] || [ "$s2x" == "1" ] || [ "$s3_common" == "1" ] || [ "$s4_common" == "1" ]
then
  sed -i -e 's/format /delete_recursive /g' updater-script
fi




# 第三行： 删除在每行上前导和结尾空格
sed -i \
-e ':a;N;$!ba;s/,\n//g' \
-e 's/assert[^\n]*[\n]*//g' \
updater-script

#
# 删除前导/结尾的空格和制表符
# 不确定这需要一个单独的语句从上述工作
#
sed -i -e 's/^[ \t]*//;s/[ \t]*$//g' updater-script

#
# 删除注释行
#
sed -i -e '/^#/d' updater-script


#
# boot.img / radio.img / bootloader.img
#
img_list=( boot radio bootloader )

for (( i = 0 ; i < ${#img_list[@]} ; i++ ))
do
  img_name=${img_list[${i}]}
  str="write_raw_image PACKAGE:$img_name.img"

  #
  # Check to see if image file is written in a different manner;
  # e.g. in CyanogenMod for Galaxy S they use run_program instead of
  # write_raw_image for the boot.img in the updater-script.
  #
  line_num=`sed -n -e '/'"$str"'/{=;q}' updater-script`

  if [ "$line_num" != "" ]
  then
    str2="package_extract_file PACKAGE:$img_name.img TMP:$img_name.img"
    str3="delete TMP:$img_name.img"
    line_num3=`sed -n -e '/'"$str3"'/{=;q}' updater-script`

    if [ "$line_num3" != "" ]
    then
      line_num_temp2=$(($line_num3-2))
      str_temp=`sed -n -e ''"$line_num_temp2"'p' updater-script`

      if [ "$str_temp" == "$str2" ] && [ $line_num3 -lt $line_num ]
      then
        sed -i -e ''"$line_num"'d' updater-script
        continue
      fi
    fi
  fi

  sed -i -e 's/'"$str"'.*$/assert(package_extract_file("'"$img_name"'.img", "\/tmp\/'"$img_name"'.img"),\n       write_raw_image("\/tmp\/'"$img_name"'.img", "'"$img_name"'"),\n       delete("\/tmp\/'"$img_name"'.img"));/g' updater-script

done


#
# radio.img
#
if [ `grep -c write_radio_image updater-script` -gt 0 ]
then
  echo "- 抱歉，正在忽略 'write_radio_image' - 无法转换 ..."
  sed -i -e 's/write_radio_image PACKAGE:radio.img//g' updater-script
fi

#
# hboot.img
#
if [ `grep -c write_hboot_image updater-script` -gt 0 ]
then
  echo "- 抱歉，正在忽略 'write_hboot_image' - 无法转换 ..."
  sed -i -e 's/write_hboot_image PACKAGE:hboot.img//g' updater-script
fi



#
# copy_dir 
#
echo "- copy_dir ..."

sed -i \
  -e 's/copy_dir \(.*\)/package_extract_dir(\"\1\");/g' \
  -e 's/\(package_extract_dir.*\) \(.*\)/\1", "\2/g' \
  -e 's/\(package_extract_dir.*\)PACKAGE:/\1/g' \
  -e 's/\(package_extract_dir.*\)SYSTEM:\([^)]*\))/\1\/system\/\2)/g' \
  -e 's/\(package_extract_dir.*\)PRELOAD:\([^)]*\))/\1\/preload\/\2)/g' \
  -e 's/\(package_extract_dir.*\)DATA:\([^)]*\))/\1\/data\/\2)/g' \
  -e 's/\(package_extract_dir.*\)TMP:\([^)]*\))/\1\/tmp\/\2)/g' \
  -e 's/\(package_extract_dir.*\)SDCARD:\([^)]*\))/\1\/sdcard\/\2)/g' \
  -e 's/\(package_extract_dir.*\)BOOT:\([^)]*\))/\1\/boot\/\2)/g' \
  -e 's/\(package_extract_dir.*\)CACHE:\([^)]*\))/\1\/cache\/\2)/g' \
  updater-script




#
# set_perm_recursive
#
echo "- set_perm_recursive ..."

sed -i \
  -e 's/set_perm_recursive \(.*\)/set_perm_recursive(\1);/g' \
  -e 's/\(set_perm_recursive.*[0-9]*\) \([0-9]*\) \([0-9]*\) \([0-9]*\) /\1, \2, \3, \4, /g' \
  -e 's/\(set_perm_recursive.*\)SYSTEM:)/\1\"\/system\")/g' \
  -e 's/\(set_perm_recursive.*\)SYSTEM:\([^)]*\))/\1\"\/system\/\2\")/g' \
  -e 's/\(set_perm_recursive.*\)DATA:\([^)]*\))/\1\"\/data\/\2\")/g' \
  -e 's/\(set_perm_recursive.*\)TMP:\([^)]*\))/\1\"\/tmp\/\2\")/g' \
  -e 's/\(set_perm_recursive.*\)CACHE:\([^)]*\))/\1\"\/cache\/\2\")/g' \
  -e 's/\(set_perm_recursive.*\) \/\(.*\)\([^)]*\))/\1\ "\/\2\3\")/g' \
  updater-script



#
# set_perm
#
echo "- set_perm ..."

sed -i \
  -e 's/set_perm \(.*\)/set_perm(\1);/g' \
  -e 's/\(set_perm.*[0-9]*\) \([0-9]*\) \([0-9]*\) /\1, \2, \3, /g' \
  -e 's/\(set_perm.*\)SYSTEM:\([^)]*\))/\1\"\/system\/\2\")/g' \
  -e 's/\(set_perm.*\)DATA:\([^)]*\))/\1\"\/data\/\2\")/g' \
  -e 's/\(set_perm.*\)TMP:\([^)]*\))/\1\"\/tmp\/\2\")/g' \
  -e 's/\(set_perm.*\)CACHE:\([^)]*\))/\1\"\/cache\/\2\")/g' \
  -e 's/\(set_perm.*\) \/\(.*\)\([^)]*\))/\1\ "\/\2\3\")/g' \
  updater-script


#
# run_program
#
echo "- run_program ..."
line_num=`sed -n -e '/run_program /{=;q}' updater-script`

while [ "$line_num" != "" ]
do
  sed -i \
    -e ''$line_num' s/run_program \(.*\)/run_program(\"\1\");/g' \
    -e ''$line_num' s/ /", "/g' \
    -e ''$line_num' s/PACKAGE:/\//g' \
    -e ''$line_num' s/TMP:/\/tmp\//g' \
    -e ''$line_num' s/BOOT:/\/boot\//g' \
    -e ''$line_num' s/SYSTEM:/\/system\//g' \
    -e ''$line_num' s/DATA:/\/data\//g' \
    updater-script

  # 检查 ROM的ROOT脚本;将它们移到 /tmp; 
  # 否则为他们将不会运行 ！！设置权限之前你从 /tmp 运行它们.
 
  sed -i \
    -e ''$line_num' s/run_program("\/\([^\/^\"]*\)"\(.*\)/package_extract_file("\1", "\/tmp\/\1");\nrun_program("\/tmp\/\1"\2/g' \
    updater-script

  # 添加之前首先检查权限是否已经存在
  prog_name=`sed -n -e ''$line_num' s/package_extract_file("[^\"]*",[ ]*"\([^\"]*\)");/\1/p' updater-script`

  if [ "$prog_name" != "" ]
  then
    sed -i \
      -e ''$line_num' s/package_extract_file("\([^\"]*\)",[ ]*"\([^\"]*\)");/package_extract_file("\1", "\2");\nset_perm(0, 0, 0777, "\2");/g' \
      updater-script
  fi

  line_num=`sed -n -e '/run_program /{=;q}' updater-script`
done




#
# package_extract_file
#
echo "- package_extract_file ..."

sed -i \
  -e 's/package_extract_file PACKAGE:/package_extract_file /g' \
  -e 's/package_extract_file \(.*\)/package_extract_file(\"\1\");/g' \
  -e 's/\(package_extract_file[^,]*\) \(.*\)/\1", "\2/g' \
  -e 's/\(package_extract_file.*\)(\"SYSTEM:\([^)]*\))/\1(\"system\/\2)/g' \
  -e 's/\(package_extract_file.*\)(\"DATA:\([^)]*\))/\1(\"data\/\2)/g' \
  -e 's/\(package_extract_file.*\)(\"TMP:\([^)]*\))/\1(\"tmp\/\2)/g' \
  -e 's/\(package_extract_file.*\)SYSTEM:\([^)]*\))/\1\/system\/\2)/g' \
  -e 's/\(package_extract_file.*\)DATA:\([^)]*\))/\1\/data\/\2)/g' \
  -e 's/\(package_extract_file.*\)TMP:\([^)]*\))/\1\/tmp\/\2)/g' \
  -e 's/\(package_extract_file.*\)CACHE:\([^)]*\))/\1\/cache\/\2)/g' \
  updater-script


#
# show_progress
#
echo "- show_progress ..."

sed -i \
  -e 's/show_progress \(.*\)/show_progress(\1);/g' \
  -e 's/\(show_progress.*\) \(.*\)/\1, \2/g' \
  updater-script


#
# set_progress
#
echo "- set_progress ..."

sed -i \
  -e 's/set_progress \(.*\)/set_progress(\1);/g' \
  updater-script



#
# sleep
#
echo "- 睡眠中 ..."

sed -i \
  -e 's/sleep \(.*\)/sleep(\1);/g' \
  updater-script



#
# delete / delete_recursive
#
echo "- delete/delete_recursive ..."

sed -i \
  -e 's/delete \(.*\)/delete(\"\1\");/g' \
  -e 's/delete_recursive \(.*\)/delete_recursive(\"\1\");/g' \
  -e 's/\(delete.*\)SYSTEM:/\1\/system\//g' \
  -e 's/\(delete.*\)PRELOAD:/\1\/preload\//g' \
  -e 's/\(delete.*\)DATA:/\1\/data\//g' \
  -e 's/\(delete.*\)SDCARD:/\1\/sdcard\//g' \
  -e 's/\(delete.*\)CACHE:/\1\/cache\//g' \
  -e 's/\(delete.*\)TMP:\([^)]*\))/\1\/tmp\/\2)/g' \
  -e 's/\(delete.*\)TMP:/\1\/tmp\//g' \
  -e 's/\(delete.*\)SDEXT:/\1\/sdext\//g' \
  updater-script




#
# symlink
#
echo "- symlink ..."

sed -i \
  -e 's/symlink \(.*\)/symlink(\"\1\");/g' \
  -e 's/\(symlink("[^\ ]*\)[ ]*\([^\"]*");\)/\1", "\2/g' \
  -e 's/\(symlink.*\)SYSTEM:\(.*\)/\1\/system\/\2/g' \
  -e 's/\(symlink.*\)DATA:\(.*\)/\1\/data\/\2/g' \
  updater-script



#
# write_raw_image
#
echo "- write_raw_image ..."
  
sed -i \
  -e 's/write_raw_image \(.*\)/write_raw_image(\"\1\");/g' \
  -e 's/\(write_raw_image.*"[^,]*\) \(.*\)/\1", "\2/g' \
  -e 's/\(write_raw_image.*\)PACKAGE:/\1/g' \
  -e 's/\(write_raw_image.*\)BOOT:/\1boot/g' \
  -e 's/\(write_raw_image.*\)TMP:\([^)]*\))/\1\/tmp\/\2)/g' \
  -e 's/\(write_raw_image.*\)CACHE:\([^)]*\))/\1\/cache\/\2)/g' \
  updater-script



#
# format, mount
#
echo "- 格式化（format）和挂载（mount）..."

# 在 package_extract_dir 和 delete.* 之前添加'mount'
for new in ${new_list[@]}
do
  if [ "$new" == "userdata" ]
  then
    new2=data
  else
    if [ "$new" == "sdcard" ]
    then
      continue
    fi
    new2=$new
  fi

  # 发现哪些是第一个
  line_num_del=`sed -n -e '/delete.*("\/'"$new2"'.*")/{=;q}' updater-script`
  line_num_pkg=`sed -n -e '/package_extract_dir([^,]*, "\/'"$new2"'.*")/{=;q}' updater-script`

  use_pkg=0
  use_del=0

  if [ "$line_num_del" == "" ] && [ "$line_num_pkg" == "" ]
  then
    continue
  fi

  if [ "$line_num_del" == "" ]
  then
    use_pkg=1
  else
    if [ "$line_num_pkg" == "" ]
    then
      use_del=1
    else
      if [ "$line_num_del" -lt "$line_num_pkg" ]
      then
        use_del=1
      else
        use_pkg=1
      fi
    fi
  fi

  # 替换出现的第一个
  if [ $use_del == 1 ]
  then
    sed -i \
      -e '0,/\(delete.*\)("\/'"$new2"'\(.*\)")/s//mount("MTD", "'"$new"'", "\/'"$new2"'");\n\1("\/'"$new2"'\2")/' \
      updater-script
  else
    sed -i \
      -e '0,/package_extract_dir(\([^,]*\), "\/'"$new2"'\(.*\)")/s//mount("MTD", "'"$new"'", "\/'"$new2"'");\npackage_extract_dir(\1, "\/'"$new2"'\2")/' \
      updater-script
  fi
done



for i in $new_list_str
do

  orig=${orig_list[${i}]}
  new=${new_list[${i}]}

  new2=$new
  if [ "$new" == "userdata" ]
  then
    new2=data
  fi

  #
  # 转换 'format' 行
  #
  sed -i -e 's/format '"$orig"':/format("MTD", "'"$new"'");/g' updater-script
  sed -i -e 's/format \(.*\) '"$orig"':/format("\1", "MTD", "'"$new"'");\nmount("\1", "MTD", "'"$new"'", "\/'"$new2"'");/g' updater-script

  #
  # 我们不想移动/删除 mount boot 分区命令, 由于 
  # 我们以前使用的 boot.img 命令... 除非我们有 NAND ROM!
  #
  if [ "$new" == "boot" ]
  then

    if [ -e ../../../../boot/initrd.gz ] && [ -e ../../../../boot/zImage ]
    then
        sed -i -e 's/\(format(.*"\/boot");\)/\1\nmount("MTD", "boot", "\/boot");/g' updater-script

        grep_mnt=`grep "mount(.* \"/boot\");" updater-script`

        if [ "$grep_mnt" == "" ]
        then
          sed -i -e 's/\(mount.*"\/system");\)/\1\nmount("MTD", "boot", "\/boot");/g' updater-script
        fi          
    fi

    continue
  fi

  grep_mnt=`grep "mount(\"MTD\", \"$new\", \"/$new2\");" updater-script`


  #
  # 如果发现特殊 mount，然后删除常规 mount
  #

  grep_fmt2=`grep "format(\"[A-Za-z0-9]*\", \"MTD\", \"$new\");" updater-script`

  if [ "$grep_fmt2" != "" ]
  then

    grep_mnt2=`grep "mount(\"[A-Za-z0-9]*\", \"MTD\", \"$new\", \"/$new2\");" updater-script`

    if [ "$grep_mnt" != "" ] && [ "$grep_mnt2" != "" ]
    then
      sed -i -e '/mount("MTD", "'"$new"'", "\/'"$new2"'");/d' updater-script
    fi
  fi


  #
  # 移动关联的 'mount' 行 (如果存在), 这样他会在下面的 'format' 行
  #

  grep_fmt=`grep "format(\"MTD\", \"$new\");" updater-script`

  if [ "$grep_fmt" != "" ]
  then

    if [ "$grep_mnt" != "" ]
    then
      # 删除行
      sed -i -e '/mount("MTD", "'"$new"'", "\/'"$new2"'");/d' updater-script

      # 添加 format 后
      sed -i -e 's/format("MTD", "'"$new"'");/format("MTD", "'"$new"'");\nmount("MTD", "'"$new"'", "\/'"$new2"'");/g' updater-script
    fi
  fi

done


#
# 看看上面没有涉及任何其他 'format' 命令
#
line_num=`sed -n -e '/format /{=;q}' updater-script`

while [ "$line_num" != "" ]
do
  sed -i \
    -e ''$line_num' s/format \(.*\)/format(\"\1\");/g' \
    -e ''$line_num' s/ /", "/g' \
    -e ''$line_num' s/format\(.*\));/format\1);\nmount\1, "???");/g' \
    updater-script

  line_num=`sed -n -e '/format /{=;q}' updater-script`
done


#
# 修复任何不完整的 ("???") mounts, 使用 updater-script.orig 文件
#
if [ -e updater-script.orig ]
then
  line_num=`sed -n -e '/^mount(.*???/{=;q}' updater-script`

  while [ "$line_num" != "" ]
  do

    partial_str=`grep "^mount(" updater-script | grep -m 1 ??? | \
                sed \
                  -e 's/"???");//g' \
                  -e 's/"/\\\"/g' `

    #  从原始文件, 得到我们想要的字符串
    # 但替换特殊字符如斜杠，防止格式问题
    orig_str=`grep -m 1 "$partial_str" updater-script.orig | sed -e 's/\//fwdslash/g'`

    if [ "$orig_str" != "" ]
    then
      sed -i \
        -e ''$line_num' s/.*/'"$orig_str"'/g' \
        -e ''$line_num' s/fwdslash/\//g' \
      updater-script
    else
      # 我们不想停留在一个无限循环
      break
    fi

    line_num=`sed -n -e '/^mount(.*???/{=;q}' updater-script` 
  done
fi


#
# unmount
#
echo "- unmount ..."
for new in ${new_list[@]}
do

  if [ "$new" == "userdata" ]
  then
    new2=data
  else
    new2=$new
  fi

  grep_mnt=`grep "mount(.* \"/$new\");" updater-script`

  if [ "$grep_mnt" != "" ] 
  then
    echo "unmount(\"/$new2\");" >> updater-script      
  fi

done

#
# 修复 systems 具有不同 mounts, 例如： ext3 类型
# 例如： 'userdata' 被替换为 /dev/block/whatever
#
grep_mnt=`grep "mount(.* \"/data\");" updater-script`

if [ "$grep_mnt" != "" ] 
then
  echo "unmount(\"/data\");" >> updater-script      
fi





echo "- 最终的格式 ..."

sed -i \
  -e 's/SYSTEM:/\/system\//g' \
  -e 's/TMP:/\/tmp\//g' \
  -e 's/DATA:/\/data\//g' \
  -e 's/SDCARD:/\/sdcard\//g' \
  -e 's/CACHE:/\/cache\//g' \
  -e 's/SDEXT:/\/sdext\//g' \
  -e 's/BOOT:/\/boot\//g' \
  updater-script


#
# 修复包含特殊字符的 run_program 参数
#

sed -i \
  -e 's/\[sp\]/ /g' \
  -e 's/\[cr\]/\n/g' \
  -e 's/\[sc\]/;/g' \
  -e 's/\[co\]/,/g' \
  updater-script

#
# 检查 shell 脚本是否已取消卸载该分区
#

if [ `grep -c "run_program.*umount" updater-script` ]
then

  for new in ${new_list[@]}
  do
    if [ "$new" == "userdata" ]
    then
      new=data
    fi

    grep_mnt=`grep "mount(.* \"/$new\");" updater-script`
    grep_umnt=`grep -c "umount /$new" updater-script`
    
    if [ $grep_umnt -gt 0 ] && [ "$grep_mnt" != "" ]
    then
      sed -i -e '/unmount("\/'"$new"'");/d' updater-script      
    fi
  done

fi


#
# 其他命令 
#
sed -i \
  -e 's/add_upgrade_property/add_upgrade_property();/g' \
  -e 's/install_modem_package/install_modem_package();/g' \
  updater-script

sed -i -e 's/write_blob_raw_image PACKAGE:blob/assert(package_extract_file("blob", "\/tmp\/blob"),\n       write_blob_raw_image("\/tmp\/blob", "staging"),\n       delete("\/tmp\/blob"));/g' updater-script


#
# 清理我的脚本留下任何烂摊子
#
sed -i \
  -e 's/\/");/");/g' \
  -e 's/; $/;/g' \
  updater-script

#
# 删除空行
#
sed -i -e '/^$/d' updater-script

#
# Web 的解决方案 :-)
#
# 从文件中删除重复的、 连续的行 (模拟 "uniq").
# 设置第一行的复制的行数是保留了的, 其余的都将被删除.
#
sed -i -e '$!N; /^\(.*\)\n\1$/!P; D' updater-script


#
# 特定设备的 mount 点
#
cd ../../../../..
scripts/adjust_mnt updater-script
cd WORKING_*
cd META-INF/com/google/android

sed -i -e '/^$/d' updater-script


test_mnt=`grep "^mount(" updater-script`
test_mnt2=`grep "sbin/mount\", \"" updater-script`
test_mnt3=`grep "boot.img\"" updater-script | grep dev`

if [ "$test_mnt" != "" ] || [ "$test_mnt2" != "" ] || [ "$test_mnt3" != "" ]
then
  echo 
  echo
  echo "请确认这些设备 mount 语句是否正确:"
  echo "--------------------------------------------------------------------------"  

  if [ "$test_mnt" != "" ]
  then
    echo $test_mnt
  fi

  if [ "$test_mnt2" != "" ]
  then
    echo $test_mnt2
  fi

  if [ "$test_mnt3" != "" ]
  then
    echo $test_mnt3
  fi


  echo "--------------------------------------------------------------------------"
fi


if [ -e updater-script ]
then

  cd ../../../../..
  scripts/check_which_update_binary
  cd WORKING_*
  cd META-INF/com/google/android

  echo
  echo "--------------------------------------------------------------------------"
  echo

  if [ "$2" != "yes" ]
  then
    echo "updater-script 脚本已经被创建在工作文件夹中 META-INF/com/google/android 下，"
    echo "请检查它并作出必要更改。update-binary 文件同样被添加。"
    echo ""
  fi      

  if [ "$1" != "for_zip" ]
  then
    mv -f update-script update-script.orig
    echo "原始 update-script 脚本已经被重命名为 update-script.orig - 它将不会包括在"
    echo "完成的 ROM 刷机包的 ZIP 文件中。"
  else

    if [ "$2" == "no" ]
    then
      echo "不要删除 META-INF/com/google/android 下的任何文件。"
      echo
    fi      
  fi

  grep_fmt=`grep -n "^format(" updater-script`
  grep_mount=`grep -n "^mount(" updater-script`
  grep_huh=`grep -n "???" updater-script`

  if [ "$grep_huh" != "" ]
  then
    echo
    echo "--------------------------------------------------------------------------"
    echo
    echo "注意: 请确认修正行代码下的未知参数，对照原始 updater-script 刷机脚本。"
    echo
    echo $grep_huh | sed -e 's/;[ ]*/;\n/g'    
    echo
  fi


else
  echo "错误: updater-script 刷机脚本未被创建！"
fi

cd ../../../../..

